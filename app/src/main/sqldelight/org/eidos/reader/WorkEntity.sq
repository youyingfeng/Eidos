import kotlin.collections.List;
import org.eidos.reader.model.Chapter;

CREATE TABLE SavedWork (
    workURL TEXT PRIMARY KEY,
    title TEXT NOT NULL,
    authors TEXT AS List<String> NOT NULL,
    giftees TEXT AS List<String>,
    publishedDate TEXT NOT NULL,
    lastUpdatedDate TEXT NOT NULL,
    fandoms TEXT AS List<String> NOT NULL,
    rating TEXT NOT NULL,
    warnings TEXT AS List<String> NOT NULL,
    categories TEXT AS List<String> NOT NULL,
    completionStatus INTEGER AS Boolean NOT NULL ,
    characters TEXT AS List<String>,
    relationships TEXT AS List<String>,
    freeforms TEXT AS List<String>,
    summary TEXT NOT NULL,
    language TEXT NOT NULL,
    wordCount INTEGER NOT NULL,
    chapterCount INTEGER NOT NULL,
    maxChapters INTEGER NOT NULL,
    -- leave out hits, comments, bookmarks, and kudos, for they are temporary
    preWorkNotes TEXT NOT NULL,
    chapters TEXT AS List<Chapter> NOT NULL,
    postWorkNotes TEXT NOT NULL,
    workskin TEXT NOT NULL
);

-- CREATE TABLE SavedWorkAuthor (
--     workURL TEXT,
--     author TEXT
-- );
--
-- CREATE TABLE SavedWorkFandom (
--     workURL TEXT,
--     fandom TEXT
-- );
--
-- CREATE TABLE SavedWorkWarning (
--     workURL TEXT,
--     warning TEXT
-- );
--
-- CREATE TABLE SavedWorkCategory (
--     workURL TEXT,
--     category TEXT
-- );
--
-- CREATE TABLE SavedWorkCharacter (
--     workURL TEXT,
--     character TEXT
-- );
--
-- CREATE TABLE SavedWorkRelationship (
--     workURL TEXT,
--     relationship TEXT
-- );
--
-- CREATE TABLE SavedWorkFreeform (
--     workURL TEXT,
--     freeform TEXT
-- );


getWorksCount:
SELECT COUNT(*)
FROM SavedWork;

insert:
INSERT INTO SavedWork
VALUES ?;

delete:
DELETE FROM SavedWork
WHERE workURL = ?;

deleteAll:
DELETE FROM SavedWork;

getAllWorkBlurbs:
SELECT
workURL,
title,
authors,
giftees,
lastUpdatedDate,
fandoms,
rating,
warnings,
categories,
completionStatus,
characters,
relationships,
freeforms,
summary,
language,
wordCount,
chapterCount,
maxChapters
FROM SavedWork;

getWork:
SELECT *
FROM SavedWork
WHERE workURL = ?
LIMIT 1;

-- Full params for future use
-- (
--     workURL,
--     title,
--     authors,
--     giftees,
--     publishedDate,
--     lastUpdatedDate,
--     fandoms,
--     rating,
--     warnings,
--     categories,
--     completionStatus,
--     characters,
--     relationships,
--     freeforms,
--     summary,
--     language,
--     wordCount,
--     chapterCount,
--     maxChapters,
--     preWorkNotes,
--     chapters,
--     postWorkNotes,
--     workskin
-- )



-- TODO: Create CRUD statements: 1 create, 1 update, 1 delete, many read (e.g. select by parameter)